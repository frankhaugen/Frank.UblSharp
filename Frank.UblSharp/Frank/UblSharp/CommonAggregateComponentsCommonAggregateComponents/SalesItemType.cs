//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1144.0
namespace Frank.UblSharp.CommonAggregateComponentsCommonAggregateComponents
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Diagnostics.CodeAnalysis;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;


    /// <summary>
    /// <para><ccts:Component xmlns:ccts="urn:un:unece:uncefact:documentation:2"><ccts:ComponentType>ABIE</ccts:ComponentType><ccts:DictionaryEntryName>Sales Item. Details</ccts:DictionaryEntryName><ccts:Definition>A class to describe information related to an item in a sales context</ccts:Definition><ccts:ObjectClass>Sales Item</ccts:ObjectClass></ccts:Component></para>
    /// </summary>
    [DescriptionAttribute(@"<ccts:Component xmlns:ccts=""urn:un:unece:uncefact:documentation:2""><ccts:ComponentType>ABIE</ccts:ComponentType><ccts:DictionaryEntryName>Sales Item. Details</ccts:DictionaryEntryName><ccts:Definition>A class to describe information related to an item in a sales context</ccts:Definition><ccts:ObjectClass>Sales Item</ccts:ObjectClass></ccts:Component>")]
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1144.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("SalesItemType", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2")]
    [DebuggerStepThroughAttribute()]
    [XmlRootAttribute("SalesItem", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2")]
    public partial class SalesItemType
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        [DescriptionAttribute("Gets or sets a value uniquely identifying this entity.")]
        [RequiredAttribute(AllowEmptyStrings = true)]
        [XmlIgnoreAttribute()]
        [KeyAttribute()]
        public long Id { get; set; }

        /// <summary>
        /// <para><ccts:Component xmlns:ccts="urn:un:unece:uncefact:documentation:2"><ccts:ComponentType>BBIE</ccts:ComponentType><ccts:DictionaryEntryName>Sales Item. Quantity</ccts:DictionaryEntryName><ccts:Definition>The quantity the given information are related to</ccts:Definition><ccts:Cardinality>1</ccts:Cardinality><ccts:ObjectClass>Sales Item</ccts:ObjectClass><ccts:PropertyTerm>Quantity</ccts:PropertyTerm><ccts:RepresentationTerm>Quantity</ccts:RepresentationTerm><ccts:DataType>Quantity. Type</ccts:DataType></ccts:Component></para>
        /// </summary>
        [DescriptionAttribute(@"<ccts:Component xmlns:ccts=""urn:un:unece:uncefact:documentation:2""><ccts:ComponentType>BBIE</ccts:ComponentType><ccts:DictionaryEntryName>Sales Item. Quantity</ccts:DictionaryEntryName><ccts:Definition>The quantity the given information are related to</ccts:Definition><ccts:Cardinality>1</ccts:Cardinality><ccts:ObjectClass>Sales Item</ccts:ObjectClass><ccts:PropertyTerm>Quantity</ccts:PropertyTerm><ccts:RepresentationTerm>Quantity</ccts:RepresentationTerm><ccts:DataType>Quantity. Type</ccts:DataType></ccts:Component>")]
        [RequiredAttribute(AllowEmptyStrings = true)]
        [XmlElementAttribute("Quantity", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2")]
        public Frank.UblSharp.CommonBasicComponentsCommonBasicComponents.QuantityType_2 Quantity { get; set; }

        /// <summary>
        /// <para><ccts:Component xmlns:ccts="urn:un:unece:uncefact:documentation:2"><ccts:ComponentType>ASBIE</ccts:ComponentType><ccts:DictionaryEntryName>Sales Item. Activity Property</ccts:DictionaryEntryName><ccts:Definition>A class to describe the activity (for example "sales", "movement", ...) related to the item.</ccts:Definition><ccts:Cardinality>0..n</ccts:Cardinality><ccts:ObjectClass>Sales Item</ccts:ObjectClass><ccts:PropertyTerm>Activity Property</ccts:PropertyTerm><ccts:AssociatedObjectClass>Activity Property</ccts:AssociatedObjectClass><ccts:RepresentationTerm>Activity Property</ccts:RepresentationTerm></ccts:Component></para>
        /// </summary>
        [DescriptionAttribute(@"<ccts:Component xmlns:ccts=""urn:un:unece:uncefact:documentation:2""><ccts:ComponentType>ASBIE</ccts:ComponentType><ccts:DictionaryEntryName>Sales Item. Activity Property</ccts:DictionaryEntryName><ccts:Definition>A class to describe the activity (for example ""sales"", ""movement"", ...) related to the item.</ccts:Definition><ccts:Cardinality>0..n</ccts:Cardinality><ccts:ObjectClass>Sales Item</ccts:ObjectClass><ccts:PropertyTerm>Activity Property</ccts:PropertyTerm><ccts:AssociatedObjectClass>Activity Property</ccts:AssociatedObjectClass><ccts:RepresentationTerm>Activity Property</ccts:RepresentationTerm></ccts:Component>")]
        [XmlElementAttribute("ActivityProperty")]
        public Collection<ActivityPropertyType> ActivityProperty { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ActivityProperty collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public bool ActivityPropertySpecified
        {
            get
            {
                return ((this.ActivityProperty != null)
                            && (this.ActivityProperty.Count != 0));
            }
        }

        /// <summary>
        /// <para><ccts:Component xmlns:ccts="urn:un:unece:uncefact:documentation:2"><ccts:ComponentType>ASBIE</ccts:ComponentType><ccts:DictionaryEntryName>Sales Item. Tax Exclusive_ Price. Price</ccts:DictionaryEntryName><ccts:Definition>A price for this sales item, exclusive of tax.</ccts:Definition><ccts:Cardinality>0..n</ccts:Cardinality><ccts:ObjectClass>Sales Item</ccts:ObjectClass><ccts:PropertyTermQualifier>Tax Exclusive</ccts:PropertyTermQualifier><ccts:PropertyTerm>Price</ccts:PropertyTerm><ccts:AssociatedObjectClass>Price</ccts:AssociatedObjectClass><ccts:RepresentationTerm>Price</ccts:RepresentationTerm></ccts:Component></para>
        /// </summary>
        [DescriptionAttribute(@"<ccts:Component xmlns:ccts=""urn:un:unece:uncefact:documentation:2""><ccts:ComponentType>ASBIE</ccts:ComponentType><ccts:DictionaryEntryName>Sales Item. Tax Exclusive_ Price. Price</ccts:DictionaryEntryName><ccts:Definition>A price for this sales item, exclusive of tax.</ccts:Definition><ccts:Cardinality>0..n</ccts:Cardinality><ccts:ObjectClass>Sales Item</ccts:ObjectClass><ccts:PropertyTermQualifier>Tax Exclusive</ccts:PropertyTermQualifier><ccts:PropertyTerm>Price</ccts:PropertyTerm><ccts:AssociatedObjectClass>Price</ccts:AssociatedObjectClass><ccts:RepresentationTerm>Price</ccts:RepresentationTerm></ccts:Component>")]
        [XmlElementAttribute("TaxExclusivePrice")]
        public Collection<PriceType> TaxExclusivePrice { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TaxExclusivePrice collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public bool TaxExclusivePriceSpecified
        {
            get
            {
                return ((this.TaxExclusivePrice != null)
                            && (this.TaxExclusivePrice.Count != 0));
            }
        }

        /// <summary>
        /// <para><ccts:Component xmlns:ccts="urn:un:unece:uncefact:documentation:2"><ccts:ComponentType>ASBIE</ccts:ComponentType><ccts:DictionaryEntryName>Sales Item. Tax Inclusive_ Price. Price</ccts:DictionaryEntryName><ccts:Definition>A price for this sales item, including tax.</ccts:Definition><ccts:Cardinality>0..n</ccts:Cardinality><ccts:ObjectClass>Sales Item</ccts:ObjectClass><ccts:PropertyTermQualifier>Tax Inclusive</ccts:PropertyTermQualifier><ccts:PropertyTerm>Price</ccts:PropertyTerm><ccts:AssociatedObjectClass>Price</ccts:AssociatedObjectClass><ccts:RepresentationTerm>Price</ccts:RepresentationTerm></ccts:Component></para>
        /// </summary>
        [DescriptionAttribute(@"<ccts:Component xmlns:ccts=""urn:un:unece:uncefact:documentation:2""><ccts:ComponentType>ASBIE</ccts:ComponentType><ccts:DictionaryEntryName>Sales Item. Tax Inclusive_ Price. Price</ccts:DictionaryEntryName><ccts:Definition>A price for this sales item, including tax.</ccts:Definition><ccts:Cardinality>0..n</ccts:Cardinality><ccts:ObjectClass>Sales Item</ccts:ObjectClass><ccts:PropertyTermQualifier>Tax Inclusive</ccts:PropertyTermQualifier><ccts:PropertyTerm>Price</ccts:PropertyTerm><ccts:AssociatedObjectClass>Price</ccts:AssociatedObjectClass><ccts:RepresentationTerm>Price</ccts:RepresentationTerm></ccts:Component>")]
        [XmlElementAttribute("TaxInclusivePrice")]
        public Collection<PriceType> TaxInclusivePrice { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TaxInclusivePrice collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public bool TaxInclusivePriceSpecified
        {
            get
            {
                return ((this.TaxInclusivePrice != null)
                            && (this.TaxInclusivePrice.Count != 0));
            }
        }

        /// <summary>
        /// <para><ccts:Component xmlns:ccts="urn:un:unece:uncefact:documentation:2"><ccts:ComponentType>ASBIE</ccts:ComponentType><ccts:DictionaryEntryName>Sales Item. Item</ccts:DictionaryEntryName><ccts:Definition>The sales item itself.</ccts:Definition><ccts:Cardinality>1</ccts:Cardinality><ccts:ObjectClass>Sales Item</ccts:ObjectClass><ccts:PropertyTerm>Item</ccts:PropertyTerm><ccts:AssociatedObjectClass>Item</ccts:AssociatedObjectClass><ccts:RepresentationTerm>Item</ccts:RepresentationTerm></ccts:Component></para>
        /// </summary>
        [DescriptionAttribute(@"<ccts:Component xmlns:ccts=""urn:un:unece:uncefact:documentation:2""><ccts:ComponentType>ASBIE</ccts:ComponentType><ccts:DictionaryEntryName>Sales Item. Item</ccts:DictionaryEntryName><ccts:Definition>The sales item itself.</ccts:Definition><ccts:Cardinality>1</ccts:Cardinality><ccts:ObjectClass>Sales Item</ccts:ObjectClass><ccts:PropertyTerm>Item</ccts:PropertyTerm><ccts:AssociatedObjectClass>Item</ccts:AssociatedObjectClass><ccts:RepresentationTerm>Item</ccts:RepresentationTerm></ccts:Component>")]
        [RequiredAttribute(AllowEmptyStrings = true)]
        [XmlElementAttribute("Item")]
        public ItemType Item { get; set; }
    }
}
