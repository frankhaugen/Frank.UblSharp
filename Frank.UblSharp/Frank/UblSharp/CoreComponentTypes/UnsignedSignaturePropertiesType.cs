//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1144.0
namespace Frank.UblSharp.CoreComponentTypes
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Diagnostics.CodeAnalysis;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;


    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1144.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("UnsignedSignaturePropertiesType", Namespace = "http://uri.etsi.org/01903/v1.3.2#")]
    [DebuggerStepThroughAttribute()]
    [XmlRootAttribute("UnsignedSignatureProperties", Namespace = "http://uri.etsi.org/01903/v1.3.2#")]
    public partial class UnsignedSignaturePropertiesType
    {

        [XmlElementAttribute("CounterSignature")]
        public Collection<CounterSignatureType> CounterSignature { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CounterSignature collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public bool CounterSignatureSpecified
        {
            get
            {
                return ((this.CounterSignature != null)
                            && (this.CounterSignature.Count != 0));
            }
        }

        [XmlElementAttribute("SignatureTimeStamp")]
        public Collection<XAdEsTimeStampType> SignatureTimeStamp { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SignatureTimeStamp collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public bool SignatureTimeStampSpecified
        {
            get
            {
                return ((this.SignatureTimeStamp != null)
                            && (this.SignatureTimeStamp.Count != 0));
            }
        }

        [XmlElementAttribute("CompleteCertificateRefs")]
        public Collection<CompleteCertificateRefsType> CompleteCertificateRefs { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CompleteCertificateRefs collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public bool CompleteCertificateRefsSpecified
        {
            get
            {
                return ((this.CompleteCertificateRefs != null)
                            && (this.CompleteCertificateRefs.Count != 0));
            }
        }

        [XmlElementAttribute("CompleteRevocationRefs")]
        public Collection<CompleteRevocationRefsType> CompleteRevocationRefs { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CompleteRevocationRefs collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public bool CompleteRevocationRefsSpecified
        {
            get
            {
                return ((this.CompleteRevocationRefs != null)
                            && (this.CompleteRevocationRefs.Count != 0));
            }
        }

        [XmlElementAttribute("AttributeCertificateRefs")]
        public Collection<CompleteCertificateRefsType> AttributeCertificateRefs { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AttributeCertificateRefs collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public bool AttributeCertificateRefsSpecified
        {
            get
            {
                return ((this.AttributeCertificateRefs != null)
                            && (this.AttributeCertificateRefs.Count != 0));
            }
        }

        [XmlElementAttribute("AttributeRevocationRefs")]
        public Collection<CompleteRevocationRefsType> AttributeRevocationRefs { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AttributeRevocationRefs collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public bool AttributeRevocationRefsSpecified
        {
            get
            {
                return ((this.AttributeRevocationRefs != null)
                            && (this.AttributeRevocationRefs.Count != 0));
            }
        }

        [XmlElementAttribute("SigAndRefsTimeStamp")]
        public Collection<XAdEsTimeStampType> SigAndRefsTimeStamp { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SigAndRefsTimeStamp collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public bool SigAndRefsTimeStampSpecified
        {
            get
            {
                return ((this.SigAndRefsTimeStamp != null)
                            && (this.SigAndRefsTimeStamp.Count != 0));
            }
        }

        [XmlElementAttribute("RefsOnlyTimeStamp")]
        public Collection<XAdEsTimeStampType> RefsOnlyTimeStamp { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RefsOnlyTimeStamp collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public bool RefsOnlyTimeStampSpecified
        {
            get
            {
                return ((this.RefsOnlyTimeStamp != null)
                            && (this.RefsOnlyTimeStamp.Count != 0));
            }
        }

        [XmlElementAttribute("CertificateValues")]
        public Collection<CertificateValuesType> CertificateValues { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CertificateValues collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public bool CertificateValuesSpecified
        {
            get
            {
                return ((this.CertificateValues != null)
                            && (this.CertificateValues.Count != 0));
            }
        }

        [XmlElementAttribute("RevocationValues")]
        public Collection<RevocationValuesType> RevocationValues { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RevocationValues collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public bool RevocationValuesSpecified
        {
            get
            {
                return ((this.RevocationValues != null)
                            && (this.RevocationValues.Count != 0));
            }
        }

        [XmlElementAttribute("AttrAuthoritiesCertValues")]
        public Collection<CertificateValuesType> AttrAuthoritiesCertValues { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AttrAuthoritiesCertValues collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public bool AttrAuthoritiesCertValuesSpecified
        {
            get
            {
                return ((this.AttrAuthoritiesCertValues != null)
                            && (this.AttrAuthoritiesCertValues.Count != 0));
            }
        }

        [XmlElementAttribute("AttributeRevocationValues")]
        public Collection<RevocationValuesType> AttributeRevocationValues { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AttributeRevocationValues collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public bool AttributeRevocationValuesSpecified
        {
            get
            {
                return ((this.AttributeRevocationValues != null)
                            && (this.AttributeRevocationValues.Count != 0));
            }
        }

        [XmlElementAttribute("ArchiveTimeStamp")]
        public Collection<XAdEsTimeStampType> ArchiveTimeStamp { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ArchiveTimeStamp collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public bool ArchiveTimeStampSpecified
        {
            get
            {
                return ((this.ArchiveTimeStamp != null)
                            && (this.ArchiveTimeStamp.Count != 0));
            }
        }

        [XmlAnyElementAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public Collection<System.Xml.Linq.XElement> Any { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null)
                            && (this.Any.Count != 0));
            }
        }

        [AllowNullAttribute()]
        [MaybeNullAttribute()]
        [XmlAttributeAttribute("Id")]
        [KeyAttribute()]
        public string Id { get; set; }
    }
}
