using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Frank.UblSharp.Internals.XsdCodeGenerator
{
    internal static class XmlSchemaSetMethodGenerator
    {
        public static MethodDeclarationSyntax GenerateGetXmlSchemaSetMethod()
        {
	        return SyntaxFactory.MethodDeclaration
		        (
			        SyntaxFactory.IdentifierName("XmlSchemaSet"),
			        SyntaxFactory.Identifier("GetXmlSchemaSet")
		        )
		        .WithModifiers
		        (
			        SyntaxFactory.TokenList
			        (
				        new[]
				        {
					        SyntaxFactory.Token(SyntaxKind.InternalKeyword),
					        SyntaxFactory.Token(SyntaxKind.StaticKeyword)
				        }
			        )
		        )
		        .WithBody
		        (
			        SyntaxFactory.Block
			        (
				        SyntaxFactory.LocalDeclarationStatement
				        (
					        SyntaxFactory.VariableDeclaration
						        (
							        SyntaxFactory.IdentifierName("var")
						        )
						        .WithVariables
						        (
							        SyntaxFactory.SingletonSeparatedList<VariableDeclaratorSyntax>
							        (
								        SyntaxFactory.VariableDeclarator
									        (
										        SyntaxFactory.Identifier("schemaSet")
									        )
									        .WithInitializer
									        (
										        SyntaxFactory.EqualsValueClause
										        (
											        SyntaxFactory.ObjectCreationExpression
												        (
													        SyntaxFactory.IdentifierName("XmlSchemaSet")
												        )
												        .WithArgumentList
												        (
													        SyntaxFactory.ArgumentList()
												        )
										        )
									        )
							        )
						        )
				        ),
				        SyntaxFactory.ForEachStatement
				        (
					        SyntaxFactory.IdentifierName("var"),
					        SyntaxFactory.Identifier("xsdFile"),
					        SyntaxFactory.IdentifierName("Files"),
					        SyntaxFactory.Block
					        (
						        SyntaxFactory.LocalDeclarationStatement
							        (
								        SyntaxFactory.VariableDeclaration
									        (
										        SyntaxFactory.IdentifierName("var")
									        )
									        .WithVariables
									        (
										        SyntaxFactory.SingletonSeparatedList<VariableDeclaratorSyntax>
										        (
											        SyntaxFactory.VariableDeclarator
												        (
													        SyntaxFactory.Identifier("reader")
												        )
												        .WithInitializer
												        (
													        SyntaxFactory.EqualsValueClause
													        (
														        SyntaxFactory.InvocationExpression
														        (
															        SyntaxFactory.MemberAccessExpression
															        (
																        SyntaxKind.SimpleMemberAccessExpression,
																        SyntaxFactory.IdentifierName("xsdFile"),
																        SyntaxFactory.IdentifierName("OpenText")
															        )
														        )
													        )
												        )
										        )
									        )
							        )
							        .WithUsingKeyword
							        (
								        SyntaxFactory.Token(SyntaxKind.UsingKeyword)
							        ),
						        SyntaxFactory.LocalDeclarationStatement
						        (
							        SyntaxFactory.VariableDeclaration
								        (
									        SyntaxFactory.IdentifierName("var")
								        )
								        .WithVariables
								        (
									        SyntaxFactory.SingletonSeparatedList<VariableDeclaratorSyntax>
									        (
										        SyntaxFactory.VariableDeclarator
											        (
												        SyntaxFactory.Identifier("schema")
											        )
											        .WithInitializer
											        (
												        SyntaxFactory.EqualsValueClause
												        (
													        SyntaxFactory.InvocationExpression
														        (
															        SyntaxFactory.MemberAccessExpression
															        (
																        SyntaxKind.SimpleMemberAccessExpression,
																        SyntaxFactory.IdentifierName("XmlSchema"),
																        SyntaxFactory.IdentifierName("Read")
															        )
														        )
														        .WithArgumentList
														        (
															        SyntaxFactory.ArgumentList
															        (
																        SyntaxFactory.SeparatedList<ArgumentSyntax>
																        (
																	        new SyntaxNodeOrToken[]
																	        {
																		        SyntaxFactory.Argument
																		        (
																			        SyntaxFactory.IdentifierName("reader")
																		        ),
																		        SyntaxFactory.Token(SyntaxKind.CommaToken),
																		        SyntaxFactory.Argument
																		        (
																			        SyntaxFactory.LiteralExpression
																			        (
																				        SyntaxKind.NullLiteralExpression
																			        )
																		        )
																	        }
																        )
															        )
														        )
												        )
											        )
									        )
								        )
						        ),
						        SyntaxFactory.IfStatement
						        (
							        SyntaxFactory.BinaryExpression
							        (
								        SyntaxKind.NotEqualsExpression,
								        SyntaxFactory.IdentifierName("schema"),
								        SyntaxFactory.LiteralExpression
								        (
									        SyntaxKind.NullLiteralExpression
								        )
							        ),
							        SyntaxFactory.Block
							        (
								        SyntaxFactory.ExpressionStatement
								        (
									        SyntaxFactory.AssignmentExpression
									        (
										        SyntaxKind.SimpleAssignmentExpression,
										        SyntaxFactory.MemberAccessExpression
										        (
											        SyntaxKind.SimpleMemberAccessExpression,
											        SyntaxFactory.IdentifierName("schema"),
											        SyntaxFactory.IdentifierName("SourceUri")
										        ),
										        SyntaxFactory.MemberAccessExpression
										        (
											        SyntaxKind.SimpleMemberAccessExpression,
											        SyntaxFactory.ObjectCreationExpression
												        (
													        SyntaxFactory.IdentifierName("Uri")
												        )
												        .WithArgumentList
												        (
													        SyntaxFactory.ArgumentList
													        (
														        SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>
														        (
															        SyntaxFactory.Argument
															        (
																        SyntaxFactory.MemberAccessExpression
																        (
																	        SyntaxKind.SimpleMemberAccessExpression,
																	        SyntaxFactory.IdentifierName("xsdFile"),
																	        SyntaxFactory.IdentifierName("FullName")
																        )
															        )
														        )
													        )
												        ),
											        SyntaxFactory.IdentifierName("AbsoluteUri")
										        )
									        )
								        ),
								        SyntaxFactory.ExpressionStatement
								        (
									        SyntaxFactory.InvocationExpression
										        (
											        SyntaxFactory.MemberAccessExpression
											        (
												        SyntaxKind.SimpleMemberAccessExpression,
												        SyntaxFactory.IdentifierName("schemaSet"),
												        SyntaxFactory.IdentifierName("Add")
											        )
										        )
										        .WithArgumentList
										        (
											        SyntaxFactory.ArgumentList
											        (
												        SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>
												        (
													        SyntaxFactory.Argument
													        (
														        SyntaxFactory.IdentifierName("schema")
													        )
												        )
											        )
										        )
								        )
							        )
						        )
					        )
				        ),
				        SyntaxFactory.ExpressionStatement
				        (
					        SyntaxFactory.InvocationExpression
					        (
						        SyntaxFactory.MemberAccessExpression
						        (
							        SyntaxKind.SimpleMemberAccessExpression,
							        SyntaxFactory.IdentifierName("schemaSet"),
							        SyntaxFactory.IdentifierName("Compile")
						        )
					        )
				        ),
				        SyntaxFactory.ReturnStatement
				        (
					        SyntaxFactory.IdentifierName("schemaSet")
				        )
			        )
		        );
        }
    }
}